:- use_module(library(csv)). 
:- use_module(library(http/http_server)). 
:- use_module(library(http/http_parameters)). 
 
% Dynamic predicate to store student data 
:- dynamic student/3. 
 
% Load data from CSV file 
load_csv(File) :- 
    retractall(student(_, _, _)), % Clear existing data 
    csv_read_file(File, Rows, [functor(student), arity(3)]), 
    maplist(assert, Rows). 
 
% Eligibility Rules 
eligible_for_scholarship(Student_ID) :- 
    student(Student_ID, Attendance, CGPA), 
    Attendance >= 75, 
    CGPA >= 9.0. 
 
permitted_for_exam(Student_ID) :- 
    student(Student_ID, Attendance, _), 
    Attendance >= 75. 
 
% REST API Handler 
:- http_handler(root(check), handle_request, []). 
 
% Handle Requests 
handle_request(Request) :- 
    (   http_parameters(Request, [id(StudentID, [integer])]) -> 
        % Query for specific StudentID 
        (   student(StudentID, Attendance, CGPA) -> 
            (   eligible_for_scholarship(StudentID) -> 
                Status = "Eligible for Scholarship and Exam"; 
                permitted_for_exam(StudentID) -> 
                Status = "Eligible for Exam Only"; 
                Status = "Not Eligible" 
            ), 
            format('Content-type: text/plain~n~n'), 
            format('Student ID: ~w~nAttendance: ~w~nCGPA: ~w~nStatus: ~w~n', 
                   [StudentID, Attendance, CGPA, Status]) 
        ;   % If StudentID not found 
            format('Content-type: text/plain~n~n'), 
            format('Student ID ~w not found~n', [StudentID]) 
        ) 
    ;   % Query for all students if no StudentID is provided 
        findall( 
            [StudentID, Attendance, CGPA, Status], 
            (   student(StudentID, Attendance, CGPA), 
                (   eligible_for_scholarship(StudentID) -> 
                    Status = "Eligible for Scholarship and Exam"; 
                    permitted_for_exam(StudentID) -> 
                    Status = "Eligible for Exam Only"; 
                    Status = "Not Eligible" 
                ) 
            ), 
            Results 
        ), 
        format('Content-type: text/plain~n~n'), 
        print_results(Results) 
    ). 
 
% Print results for all students 
print_results([]). 
print_results([[StudentID, Attendance, CGPA, Status] | Rest]) :- 
    format('Student ID: ~w~nAttendance: ~w~nCGPA: ~w~nStatus: ~w~n~n', 
           [StudentID, Attendance, CGPA, Status]), 
    print_results(Rest).
